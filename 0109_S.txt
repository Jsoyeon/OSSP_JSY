import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)
import seaborn as sns
import matplotlib.pyplot as plt
import json
from pylab import rcParams
rcParams['figure.figsize'] = 25, 16
import nltk
nltk.download('wordnet')
from nltk.stem import WordNetLemmatizer
import re
from sklearn.feature_extraction.text import TfidfVectorizer, HashingVectorizer
from sklearn.pipeline import FeatureUnion
from sklearn.svm import LinearSVC




traindf = pd.read_json('train.json')
testdf = pd.read_json('test.json')



traindf["cuisine"].unique()



traindf["cuisine"].value_counts()



sns.countplot(x="cuisine", data=traindf)



traindf["len_ingredients"] = traindf["ingredients"].apply(lambda x: len(x))
testdf["len_ingredients"] = testdf["ingredients"].apply(lambda x: len(x))


traindf.sort_values(by=["len_ingredients"],ascending=False).head(5)



sns.distplot(traindf["len_ingredients"])



sns.boxplot(y="len_ingredients",x="cuisine", data=traindf)




traindf['ingredients_clean_string'] = [' , '.join(z).strip() for z in traindf['ingredients']]
traindf['ingredients_string'] = [' '.join([WordNetLemmatizer().lemmatize(re.sub('[^A-Za-z]', ' ', line)) for line in lists]).strip() for lists in traindf['ingredients']]       
testdf['ingredients_clean_string'] = [' , '.join(z).strip() for z in testdf['ingredients']]
testdf['ingredients_string'] = [' '.join([WordNetLemmatizer().lemmatize(re.sub('[^A-Za-z]', ' ', line)) for line in lists]).strip() for lists in testdf['ingredients']]       



corpustr = traindf['ingredients_string']
estimators = [("tfidf", TfidfVectorizer(stop_words='english',
             ngram_range = ( 1 , 1 ),analyzer="word",
             max_df = .57 , binary=False ,max_features =6706, token_pattern=r'\w+' , sublinear_tf=False) ),
             ("hash", HashingVectorizer ( stop_words='english',
             ngram_range = ( 1 , 2 ),n_features  =6706,analyzer="word",token_pattern=r'\w+', binary =False))]


tfidftr = FeatureUnion(estimators).fit_transform(corpustr).todense()
corpusts = testdf['ingredients_string']
tfidfts = FeatureUnion(estimators).transform(corpusts)




predictors_tr = tfidftr
targets_tr = traindf['cuisine']
predictors_ts = tfidfts




classSVC = LinearSVC(C=0.3999, penalty="l2", dual=False) 
classSVC = classSVC.fit(predictors_tr,targets_tr)



predictions = classSVC.predict(predictors_ts) 
testdf['cuisine'] = predictions
testdf = testdf.sort_values('id' , ascending=True)



testdf[['id' , 'cuisine' ]].to_csv("final submission.csv", index=False)













